
TEMPNEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000083c  000008b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b6  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000016f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000113b  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b17  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00003a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bd  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000766  00000000  00000000  00003e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000045cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  8a:	0c 94 1c 04 	jmp	0x838	; 0x838 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
	return ADC;// Return the converted Digital value to the function
}

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd;
  92:	82 bb       	out	0x12, r24	; 18
	ctrl =(0<<rs)|(0<<rw)|(1<<en);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_cmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_cmd+0x10>
  a2:	00 00       	nop
	_delay_ms(1);
	ctrl =(0<<rs)|(0<<rw)|(0<<en);
  a4:	18 ba       	out	0x18, r1	; 24
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_cmd+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_cmd+0x1e>
  b0:	00 00       	nop
	_delay_ms(50);
	return;
}
  b2:	08 95       	ret

000000b4 <ADC_init>:
#define en PB2		// enable signal
#define rw PB1		// read/write signal
#define rs PB0		// register select signal
void ADC_init()
{
	ADMUX = (1<<REFS0) ; // Reference Voltage to Avcc= Vcc= 5 V
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
  b8:	83 e8       	ldi	r24, 0x83	; 131
  ba:	86 b9       	out	0x06, r24	; 6
} 
  bc:	08 95       	ret

000000be <init_LCD>:
void init_LCD(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	LCD_cmd(0x38);		// initialization of 16X1 LCD in 8bit mode
  c2:	c9 e4       	ldi	r28, 0x49	; 73
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fe 01       	movw	r30, r28
  cc:	09 95       	icall
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <init_LCD+0x14>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <init_LCD+0x1a>
  d8:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x01);		// clear LCD
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fe 01       	movw	r30, r28
  e0:	09 95       	icall
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <init_LCD+0x28>
  ea:	00 c0       	rjmp	.+0      	; 0xec <init_LCD+0x2e>
  ec:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x0E);		// cursor ON
  ee:	8e e0       	ldi	r24, 0x0E	; 14
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fe 01       	movw	r30, r28
  f4:	09 95       	icall
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <init_LCD+0x3c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_LCD+0x42>
 100:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x80);		// ---8 go to first line and --0 is for 0th position
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fe 01       	movw	r30, r28
 108:	09 95       	icall
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <init_LCD+0x50>
 112:	00 c0       	rjmp	.+0      	; 0x114 <init_LCD+0x56>
 114:	00 00       	nop
	_delay_ms(1);
	return;
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <ADC_read>:

int ADC_read( uint8_t channel)
{
	channel = channel & 0b00000111; // Making sure that channel value is less than 7
	ADMUX|= channel; // Assigning channel value to MUX bits of ADMUX
 11c:	97 b1       	in	r25, 0x07	; 7
	return;
}

int ADC_read( uint8_t channel)
{
	channel = channel & 0b00000111; // Making sure that channel value is less than 7
 11e:	87 70       	andi	r24, 0x07	; 7
	ADMUX|= channel; // Assigning channel value to MUX bits of ADMUX
 120:	98 2b       	or	r25, r24
 122:	97 b9       	out	0x07, r25	; 7
	ADCSRA|= (1<<ADSC); // Start Conversion
 124:	36 9a       	sbi	0x06, 6	; 6
	while( ! ( ADCSRA & (1<<ADIF) ) ); // Wait till the conversion completes
 126:	34 9b       	sbis	0x06, 4	; 6
 128:	fe cf       	rjmp	.-4      	; 0x126 <ADC_read+0xa>
	ADCSRA|= (1<<ADIF); // Clear the ADIF bit by writing ‘1’
 12a:	34 9a       	sbi	0x06, 4	; 6
	return ADC;// Return the converted Digital value to the function
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	95 b1       	in	r25, 0x05	; 5
}
 130:	08 95       	ret

00000132 <LCD_write>:
	_delay_ms(50);
	return;
}
void LCD_write(unsigned char data)
{
	LCD_DATA= data;
 132:	82 bb       	out	0x12, r24	; 18
	ctrl = (1<<rs)|(0<<rw)|(1<<en);
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	88 bb       	out	0x18, r24	; 24
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_write+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_write+0x10>
 142:	00 00       	nop
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	88 bb       	out	0x18, r24	; 24
 148:	83 ed       	ldi	r24, 0xD3	; 211
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_write+0x1a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_write+0x20>
 152:	00 00       	nop
	_delay_ms(50);
	return ;
}
 154:	08 95       	ret

00000156 <LCD_write_string>:
void LCD_write_string(unsigned char *str)	//store address value of the string in pointer *str
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
	int i=0;
	char a;
	while(str[i]!='\0')				// loop will go on till the NULL character in the string
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	31 f0       	breq	.+12     	; 0x16e <LCD_write_string+0x18>
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
	_delay_ms(50);
	return ;
}
void LCD_write_string(unsigned char *str)	//store address value of the string in pointer *str
 162:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	char a;
	while(str[i]!='\0')				// loop will go on till the NULL character in the string
	{
		LCD_write(str[i]);				// sending data on LCD byte by byte
 164:	0e 94 99 00 	call	0x132	; 0x132 <LCD_write>
}
void LCD_write_string(unsigned char *str)	//store address value of the string in pointer *str
{
	int i=0;
	char a;
	while(str[i]!='\0')				// loop will go on till the NULL character in the string
 168:	89 91       	ld	r24, Y+
 16a:	88 23       	and	r24, r24
 16c:	d9 f7       	brne	.-10     	; 0x164 <LCD_write_string+0xe>
	{
		LCD_write(str[i]);				// sending data on LCD byte by byte
		i++;
	}
	a=248;
	LCD_write(a);
 16e:	88 ef       	ldi	r24, 0xF8	; 248
 170:	0e 94 99 00 	call	0x132	; 0x132 <LCD_write>
	a=67;
	LCD_write(a);
 174:	83 e4       	ldi	r24, 0x43	; 67
 176:	0e 94 99 00 	call	0x132	; 0x132 <LCD_write>
	return;
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <main>:
 
int main()
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <main+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <main+0x8>
 188:	0f 92       	push	r0
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xff;		
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	81 bb       	out	0x11, r24	; 17
	DDRB=0x07;		
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	87 bb       	out	0x17, r24	; 23
 196:	83 ed       	ldi	r24, 0xD3	; 211
 198:	90 e3       	ldi	r25, 0x30	; 48
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x1a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x20>
 1a0:	00 00       	nop
		_delay_ms(50);				// delay of 50 mili seconds
		ADC_init();					// initialization of ADC
 1a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_init>
		while(1)
		{	value=0;temp=0;
			init_LCD();				// initialization of LCD
			value=ADC_read(0);		// function to read the Adc value
			temp=(value/1023)*5*100;	// temp=100*voltage
			sprintf(str, "%d", temp);	// function to convert int to string
 1a6:	8e 01       	movw	r16, r28
 1a8:	0f 5f       	subi	r16, 0xFF	; 255
 1aa:	1f 4f       	sbci	r17, 0xFF	; 255
 1ac:	0f 2e       	mov	r0, r31
 1ae:	f0 e6       	ldi	r31, 0x60	; 96
 1b0:	ef 2e       	mov	r14, r31
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ff 2e       	mov	r15, r31
 1b6:	f0 2d       	mov	r31, r0
		
		while(1)
		{	value=0;temp=0;
			init_LCD();				// initialization of LCD
			value=ADC_read(0);		// function to read the Adc value
			temp=(value/1023)*5*100;	// temp=100*voltage
 1b8:	0f 2e       	mov	r0, r31
 1ba:	ff ef       	ldi	r31, 0xFF	; 255
 1bc:	cf 2e       	mov	r12, r31
 1be:	f3 e0       	ldi	r31, 0x03	; 3
 1c0:	df 2e       	mov	r13, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f4 ef       	ldi	r31, 0xF4	; 244
 1c8:	af 2e       	mov	r10, r31
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	bf 2e       	mov	r11, r31
 1ce:	f0 2d       	mov	r31, r0
		int temp;
		char str[5];
		
		while(1)
		{	value=0;temp=0;
			init_LCD();				// initialization of LCD
 1d0:	0e 94 5f 00 	call	0xbe	; 0xbe <init_LCD>
			value=ADC_read(0);		// function to read the Adc value
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <ADC_read>
			temp=(value/1023)*5*100;	// temp=100*voltage
			sprintf(str, "%d", temp);	// function to convert int to string
 1da:	00 d0       	rcall	.+0      	; 0x1dc <main+0x5c>
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x5e>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0x60>
 1e0:	ed b7       	in	r30, 0x3d	; 61
 1e2:	fe b7       	in	r31, 0x3e	; 62
 1e4:	31 96       	adiw	r30, 0x01	; 1
 1e6:	ad b7       	in	r26, 0x3d	; 61
 1e8:	be b7       	in	r27, 0x3e	; 62
 1ea:	12 96       	adiw	r26, 0x02	; 2
 1ec:	1c 93       	st	X, r17
 1ee:	0e 93       	st	-X, r16
 1f0:	11 97       	sbiw	r26, 0x01	; 1
 1f2:	f3 82       	std	Z+3, r15	; 0x03
 1f4:	e2 82       	std	Z+2, r14	; 0x02
		
		while(1)
		{	value=0;temp=0;
			init_LCD();				// initialization of LCD
			value=ADC_read(0);		// function to read the Adc value
			temp=(value/1023)*5*100;	// temp=100*voltage
 1f6:	b6 01       	movw	r22, r12
 1f8:	0e 94 1e 01 	call	0x23c	; 0x23c <__divmodhi4>
 1fc:	6a 9d       	mul	r22, r10
 1fe:	c0 01       	movw	r24, r0
 200:	6b 9d       	mul	r22, r11
 202:	90 0d       	add	r25, r0
 204:	7a 9d       	mul	r23, r10
 206:	90 0d       	add	r25, r0
 208:	11 24       	eor	r1, r1
			sprintf(str, "%d", temp);	// function to convert int to string
 20a:	95 83       	std	Z+5, r25	; 0x05
 20c:	84 83       	std	Z+4, r24	; 0x04
 20e:	0e 94 45 01 	call	0x28a	; 0x28a <sprintf>
			LCD_write_string(str);	// function to print string on LCD
 212:	8d b7       	in	r24, 0x3d	; 61
 214:	9e b7       	in	r25, 0x3e	; 62
 216:	06 96       	adiw	r24, 0x06	; 6
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	9e bf       	out	0x3e, r25	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	8d bf       	out	0x3d, r24	; 61
 222:	c8 01       	movw	r24, r16
 224:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_write_string>
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	92 e4       	ldi	r25, 0x42	; 66
 22c:	af e0       	ldi	r26, 0x0F	; 15
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	a0 40       	sbci	r26, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0xae>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0xb8>
 238:	00 00       	nop
 23a:	ca cf       	rjmp	.-108    	; 0x1d0 <main+0x50>

0000023c <__divmodhi4>:
 23c:	97 fb       	bst	r25, 7
 23e:	09 2e       	mov	r0, r25
 240:	07 26       	eor	r0, r23
 242:	0a d0       	rcall	.+20     	; 0x258 <__divmodhi4_neg1>
 244:	77 fd       	sbrc	r23, 7
 246:	04 d0       	rcall	.+8      	; 0x250 <__divmodhi4_neg2>
 248:	0c d0       	rcall	.+24     	; 0x262 <__udivmodhi4>
 24a:	06 d0       	rcall	.+12     	; 0x258 <__divmodhi4_neg1>
 24c:	00 20       	and	r0, r0
 24e:	1a f4       	brpl	.+6      	; 0x256 <__divmodhi4_exit>

00000250 <__divmodhi4_neg2>:
 250:	70 95       	com	r23
 252:	61 95       	neg	r22
 254:	7f 4f       	sbci	r23, 0xFF	; 255

00000256 <__divmodhi4_exit>:
 256:	08 95       	ret

00000258 <__divmodhi4_neg1>:
 258:	f6 f7       	brtc	.-4      	; 0x256 <__divmodhi4_exit>
 25a:	90 95       	com	r25
 25c:	81 95       	neg	r24
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	08 95       	ret

00000262 <__udivmodhi4>:
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	51 e1       	ldi	r21, 0x11	; 17
 268:	07 c0       	rjmp	.+14     	; 0x278 <__udivmodhi4_ep>

0000026a <__udivmodhi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	a6 17       	cp	r26, r22
 270:	b7 07       	cpc	r27, r23
 272:	10 f0       	brcs	.+4      	; 0x278 <__udivmodhi4_ep>
 274:	a6 1b       	sub	r26, r22
 276:	b7 0b       	sbc	r27, r23

00000278 <__udivmodhi4_ep>:
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	5a 95       	dec	r21
 27e:	a9 f7       	brne	.-22     	; 0x26a <__udivmodhi4_loop>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	08 95       	ret

0000028a <sprintf>:
 28a:	ae e0       	ldi	r26, 0x0E	; 14
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	eb e4       	ldi	r30, 0x4B	; 75
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__prologue_saves__+0x1c>
 296:	0d 89       	ldd	r16, Y+21	; 0x15
 298:	1e 89       	ldd	r17, Y+22	; 0x16
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	8c 83       	std	Y+4, r24	; 0x04
 29e:	1a 83       	std	Y+2, r17	; 0x02
 2a0:	09 83       	std	Y+1, r16	; 0x01
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	9f e7       	ldi	r25, 0x7F	; 127
 2a6:	9e 83       	std	Y+6, r25	; 0x06
 2a8:	8d 83       	std	Y+5, r24	; 0x05
 2aa:	ae 01       	movw	r20, r28
 2ac:	47 5e       	subi	r20, 0xE7	; 231
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	6f 89       	ldd	r22, Y+23	; 0x17
 2b6:	78 8d       	ldd	r23, Y+24	; 0x18
 2b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <vfprintf>
 2bc:	ef 81       	ldd	r30, Y+7	; 0x07
 2be:	f8 85       	ldd	r31, Y+8	; 0x08
 2c0:	e0 0f       	add	r30, r16
 2c2:	f1 1f       	adc	r31, r17
 2c4:	10 82       	st	Z, r1
 2c6:	2e 96       	adiw	r28, 0x0e	; 14
 2c8:	e4 e0       	ldi	r30, 0x04	; 4
 2ca:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__epilogue_restores__+0x1c>

000002ce <vfprintf>:
 2ce:	ad e0       	ldi	r26, 0x0D	; 13
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	ed e6       	ldi	r30, 0x6D	; 109
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__prologue_saves__>
 2da:	3c 01       	movw	r6, r24
 2dc:	7d 87       	std	Y+13, r23	; 0x0d
 2de:	6c 87       	std	Y+12, r22	; 0x0c
 2e0:	5a 01       	movw	r10, r20
 2e2:	fc 01       	movw	r30, r24
 2e4:	17 82       	std	Z+7, r1	; 0x07
 2e6:	16 82       	std	Z+6, r1	; 0x06
 2e8:	83 81       	ldd	r24, Z+3	; 0x03
 2ea:	81 ff       	sbrs	r24, 1
 2ec:	c8 c1       	rjmp	.+912    	; 0x67e <__stack+0x21f>
 2ee:	2e 01       	movw	r4, r28
 2f0:	08 94       	sec
 2f2:	41 1c       	adc	r4, r1
 2f4:	51 1c       	adc	r5, r1
 2f6:	f3 01       	movw	r30, r6
 2f8:	93 81       	ldd	r25, Z+3	; 0x03
 2fa:	ec 85       	ldd	r30, Y+12	; 0x0c
 2fc:	fd 85       	ldd	r31, Y+13	; 0x0d
 2fe:	93 fd       	sbrc	r25, 3
 300:	85 91       	lpm	r24, Z+
 302:	93 ff       	sbrs	r25, 3
 304:	81 91       	ld	r24, Z+
 306:	fd 87       	std	Y+13, r31	; 0x0d
 308:	ec 87       	std	Y+12, r30	; 0x0c
 30a:	88 23       	and	r24, r24
 30c:	09 f4       	brne	.+2      	; 0x310 <vfprintf+0x42>
 30e:	b3 c1       	rjmp	.+870    	; 0x676 <__stack+0x217>
 310:	85 32       	cpi	r24, 0x25	; 37
 312:	41 f4       	brne	.+16     	; 0x324 <vfprintf+0x56>
 314:	93 fd       	sbrc	r25, 3
 316:	85 91       	lpm	r24, Z+
 318:	93 ff       	sbrs	r25, 3
 31a:	81 91       	ld	r24, Z+
 31c:	fd 87       	std	Y+13, r31	; 0x0d
 31e:	ec 87       	std	Y+12, r30	; 0x0c
 320:	85 32       	cpi	r24, 0x25	; 37
 322:	29 f4       	brne	.+10     	; 0x32e <vfprintf+0x60>
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	b3 01       	movw	r22, r6
 328:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 32c:	e4 cf       	rjmp	.-56     	; 0x2f6 <vfprintf+0x28>
 32e:	ff 24       	eor	r15, r15
 330:	ee 24       	eor	r14, r14
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	10 32       	cpi	r17, 0x20	; 32
 336:	b0 f4       	brcc	.+44     	; 0x364 <vfprintf+0x96>
 338:	8b 32       	cpi	r24, 0x2B	; 43
 33a:	69 f0       	breq	.+26     	; 0x356 <vfprintf+0x88>
 33c:	8c 32       	cpi	r24, 0x2C	; 44
 33e:	28 f4       	brcc	.+10     	; 0x34a <vfprintf+0x7c>
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	51 f0       	breq	.+20     	; 0x358 <vfprintf+0x8a>
 344:	83 32       	cpi	r24, 0x23	; 35
 346:	71 f4       	brne	.+28     	; 0x364 <vfprintf+0x96>
 348:	0b c0       	rjmp	.+22     	; 0x360 <vfprintf+0x92>
 34a:	8d 32       	cpi	r24, 0x2D	; 45
 34c:	39 f0       	breq	.+14     	; 0x35c <vfprintf+0x8e>
 34e:	80 33       	cpi	r24, 0x30	; 48
 350:	49 f4       	brne	.+18     	; 0x364 <vfprintf+0x96>
 352:	11 60       	ori	r17, 0x01	; 1
 354:	2c c0       	rjmp	.+88     	; 0x3ae <vfprintf+0xe0>
 356:	12 60       	ori	r17, 0x02	; 2
 358:	14 60       	ori	r17, 0x04	; 4
 35a:	29 c0       	rjmp	.+82     	; 0x3ae <vfprintf+0xe0>
 35c:	18 60       	ori	r17, 0x08	; 8
 35e:	27 c0       	rjmp	.+78     	; 0x3ae <vfprintf+0xe0>
 360:	10 61       	ori	r17, 0x10	; 16
 362:	25 c0       	rjmp	.+74     	; 0x3ae <vfprintf+0xe0>
 364:	17 fd       	sbrc	r17, 7
 366:	2e c0       	rjmp	.+92     	; 0x3c4 <vfprintf+0xf6>
 368:	28 2f       	mov	r18, r24
 36a:	20 53       	subi	r18, 0x30	; 48
 36c:	2a 30       	cpi	r18, 0x0A	; 10
 36e:	98 f4       	brcc	.+38     	; 0x396 <vfprintf+0xc8>
 370:	16 ff       	sbrs	r17, 6
 372:	08 c0       	rjmp	.+16     	; 0x384 <vfprintf+0xb6>
 374:	8f 2d       	mov	r24, r15
 376:	88 0f       	add	r24, r24
 378:	f8 2e       	mov	r15, r24
 37a:	ff 0c       	add	r15, r15
 37c:	ff 0c       	add	r15, r15
 37e:	f8 0e       	add	r15, r24
 380:	f2 0e       	add	r15, r18
 382:	15 c0       	rjmp	.+42     	; 0x3ae <vfprintf+0xe0>
 384:	8e 2d       	mov	r24, r14
 386:	88 0f       	add	r24, r24
 388:	e8 2e       	mov	r14, r24
 38a:	ee 0c       	add	r14, r14
 38c:	ee 0c       	add	r14, r14
 38e:	e8 0e       	add	r14, r24
 390:	e2 0e       	add	r14, r18
 392:	10 62       	ori	r17, 0x20	; 32
 394:	0c c0       	rjmp	.+24     	; 0x3ae <vfprintf+0xe0>
 396:	8e 32       	cpi	r24, 0x2E	; 46
 398:	21 f4       	brne	.+8      	; 0x3a2 <vfprintf+0xd4>
 39a:	16 fd       	sbrc	r17, 6
 39c:	6c c1       	rjmp	.+728    	; 0x676 <__stack+0x217>
 39e:	10 64       	ori	r17, 0x40	; 64
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <vfprintf+0xe0>
 3a2:	8c 36       	cpi	r24, 0x6C	; 108
 3a4:	11 f4       	brne	.+4      	; 0x3aa <vfprintf+0xdc>
 3a6:	10 68       	ori	r17, 0x80	; 128
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <vfprintf+0xe0>
 3aa:	88 36       	cpi	r24, 0x68	; 104
 3ac:	59 f4       	brne	.+22     	; 0x3c4 <vfprintf+0xf6>
 3ae:	ec 85       	ldd	r30, Y+12	; 0x0c
 3b0:	fd 85       	ldd	r31, Y+13	; 0x0d
 3b2:	93 fd       	sbrc	r25, 3
 3b4:	85 91       	lpm	r24, Z+
 3b6:	93 ff       	sbrs	r25, 3
 3b8:	81 91       	ld	r24, Z+
 3ba:	fd 87       	std	Y+13, r31	; 0x0d
 3bc:	ec 87       	std	Y+12, r30	; 0x0c
 3be:	88 23       	and	r24, r24
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <vfprintf+0xf6>
 3c2:	b8 cf       	rjmp	.-144    	; 0x334 <vfprintf+0x66>
 3c4:	98 2f       	mov	r25, r24
 3c6:	95 54       	subi	r25, 0x45	; 69
 3c8:	93 30       	cpi	r25, 0x03	; 3
 3ca:	18 f0       	brcs	.+6      	; 0x3d2 <vfprintf+0x104>
 3cc:	90 52       	subi	r25, 0x20	; 32
 3ce:	93 30       	cpi	r25, 0x03	; 3
 3d0:	38 f4       	brcc	.+14     	; 0x3e0 <vfprintf+0x112>
 3d2:	24 e0       	ldi	r18, 0x04	; 4
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	a2 0e       	add	r10, r18
 3d8:	b3 1e       	adc	r11, r19
 3da:	3f e3       	ldi	r19, 0x3F	; 63
 3dc:	39 83       	std	Y+1, r19	; 0x01
 3de:	0f c0       	rjmp	.+30     	; 0x3fe <vfprintf+0x130>
 3e0:	83 36       	cpi	r24, 0x63	; 99
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <vfprintf+0x122>
 3e4:	83 37       	cpi	r24, 0x73	; 115
 3e6:	81 f0       	breq	.+32     	; 0x408 <vfprintf+0x13a>
 3e8:	83 35       	cpi	r24, 0x53	; 83
 3ea:	09 f0       	breq	.+2      	; 0x3ee <vfprintf+0x120>
 3ec:	5a c0       	rjmp	.+180    	; 0x4a2 <__stack+0x43>
 3ee:	22 c0       	rjmp	.+68     	; 0x434 <vfprintf+0x166>
 3f0:	f5 01       	movw	r30, r10
 3f2:	80 81       	ld	r24, Z
 3f4:	89 83       	std	Y+1, r24	; 0x01
 3f6:	22 e0       	ldi	r18, 0x02	; 2
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a2 0e       	add	r10, r18
 3fc:	b3 1e       	adc	r11, r19
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	c2 2e       	mov	r12, r18
 402:	d1 2c       	mov	r13, r1
 404:	42 01       	movw	r8, r4
 406:	14 c0       	rjmp	.+40     	; 0x430 <vfprintf+0x162>
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	29 2e       	mov	r2, r25
 40c:	31 2c       	mov	r3, r1
 40e:	2a 0c       	add	r2, r10
 410:	3b 1c       	adc	r3, r11
 412:	f5 01       	movw	r30, r10
 414:	80 80       	ld	r8, Z
 416:	91 80       	ldd	r9, Z+1	; 0x01
 418:	16 ff       	sbrs	r17, 6
 41a:	03 c0       	rjmp	.+6      	; 0x422 <vfprintf+0x154>
 41c:	6f 2d       	mov	r22, r15
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <vfprintf+0x158>
 422:	6f ef       	ldi	r22, 0xFF	; 255
 424:	7f ef       	ldi	r23, 0xFF	; 255
 426:	c4 01       	movw	r24, r8
 428:	0e 94 50 03 	call	0x6a0	; 0x6a0 <strnlen>
 42c:	6c 01       	movw	r12, r24
 42e:	51 01       	movw	r10, r2
 430:	1f 77       	andi	r17, 0x7F	; 127
 432:	15 c0       	rjmp	.+42     	; 0x45e <vfprintf+0x190>
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	28 2e       	mov	r2, r24
 438:	31 2c       	mov	r3, r1
 43a:	2a 0c       	add	r2, r10
 43c:	3b 1c       	adc	r3, r11
 43e:	f5 01       	movw	r30, r10
 440:	80 80       	ld	r8, Z
 442:	91 80       	ldd	r9, Z+1	; 0x01
 444:	16 ff       	sbrs	r17, 6
 446:	03 c0       	rjmp	.+6      	; 0x44e <vfprintf+0x180>
 448:	6f 2d       	mov	r22, r15
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <vfprintf+0x184>
 44e:	6f ef       	ldi	r22, 0xFF	; 255
 450:	7f ef       	ldi	r23, 0xFF	; 255
 452:	c4 01       	movw	r24, r8
 454:	0e 94 45 03 	call	0x68a	; 0x68a <strnlen_P>
 458:	6c 01       	movw	r12, r24
 45a:	10 68       	ori	r17, 0x80	; 128
 45c:	51 01       	movw	r10, r2
 45e:	13 fd       	sbrc	r17, 3
 460:	1c c0       	rjmp	.+56     	; 0x49a <__stack+0x3b>
 462:	06 c0       	rjmp	.+12     	; 0x470 <__stack+0x11>
 464:	80 e2       	ldi	r24, 0x20	; 32
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	b3 01       	movw	r22, r6
 46a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 46e:	ea 94       	dec	r14
 470:	8e 2d       	mov	r24, r14
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	c8 16       	cp	r12, r24
 476:	d9 06       	cpc	r13, r25
 478:	a8 f3       	brcs	.-22     	; 0x464 <__stack+0x5>
 47a:	0f c0       	rjmp	.+30     	; 0x49a <__stack+0x3b>
 47c:	f4 01       	movw	r30, r8
 47e:	17 fd       	sbrc	r17, 7
 480:	85 91       	lpm	r24, Z+
 482:	17 ff       	sbrs	r17, 7
 484:	81 91       	ld	r24, Z+
 486:	4f 01       	movw	r8, r30
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	b3 01       	movw	r22, r6
 48c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 490:	e1 10       	cpse	r14, r1
 492:	ea 94       	dec	r14
 494:	08 94       	sec
 496:	c1 08       	sbc	r12, r1
 498:	d1 08       	sbc	r13, r1
 49a:	c1 14       	cp	r12, r1
 49c:	d1 04       	cpc	r13, r1
 49e:	71 f7       	brne	.-36     	; 0x47c <__stack+0x1d>
 4a0:	e7 c0       	rjmp	.+462    	; 0x670 <__stack+0x211>
 4a2:	84 36       	cpi	r24, 0x64	; 100
 4a4:	11 f0       	breq	.+4      	; 0x4aa <__stack+0x4b>
 4a6:	89 36       	cpi	r24, 0x69	; 105
 4a8:	51 f5       	brne	.+84     	; 0x4fe <__stack+0x9f>
 4aa:	f5 01       	movw	r30, r10
 4ac:	17 ff       	sbrs	r17, 7
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__stack+0x5f>
 4b0:	80 81       	ld	r24, Z
 4b2:	91 81       	ldd	r25, Z+1	; 0x01
 4b4:	a2 81       	ldd	r26, Z+2	; 0x02
 4b6:	b3 81       	ldd	r27, Z+3	; 0x03
 4b8:	24 e0       	ldi	r18, 0x04	; 4
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <__stack+0x6f>
 4be:	80 81       	ld	r24, Z
 4c0:	91 81       	ldd	r25, Z+1	; 0x01
 4c2:	aa 27       	eor	r26, r26
 4c4:	97 fd       	sbrc	r25, 7
 4c6:	a0 95       	com	r26
 4c8:	ba 2f       	mov	r27, r26
 4ca:	22 e0       	ldi	r18, 0x02	; 2
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a2 0e       	add	r10, r18
 4d0:	b3 1e       	adc	r11, r19
 4d2:	01 2f       	mov	r16, r17
 4d4:	0f 76       	andi	r16, 0x6F	; 111
 4d6:	b7 ff       	sbrs	r27, 7
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <__stack+0x8b>
 4da:	b0 95       	com	r27
 4dc:	a0 95       	com	r26
 4de:	90 95       	com	r25
 4e0:	81 95       	neg	r24
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	af 4f       	sbci	r26, 0xFF	; 255
 4e6:	bf 4f       	sbci	r27, 0xFF	; 255
 4e8:	00 68       	ori	r16, 0x80	; 128
 4ea:	bc 01       	movw	r22, r24
 4ec:	cd 01       	movw	r24, r26
 4ee:	a2 01       	movw	r20, r4
 4f0:	2a e0       	ldi	r18, 0x0A	; 10
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	0e 94 87 03 	call	0x70e	; 0x70e <__ultoa_invert>
 4f8:	d8 2e       	mov	r13, r24
 4fa:	d4 18       	sub	r13, r4
 4fc:	3f c0       	rjmp	.+126    	; 0x57c <__stack+0x11d>
 4fe:	85 37       	cpi	r24, 0x75	; 117
 500:	21 f4       	brne	.+8      	; 0x50a <__stack+0xab>
 502:	1f 7e       	andi	r17, 0xEF	; 239
 504:	2a e0       	ldi	r18, 0x0A	; 10
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	20 c0       	rjmp	.+64     	; 0x54a <__stack+0xeb>
 50a:	19 7f       	andi	r17, 0xF9	; 249
 50c:	8f 36       	cpi	r24, 0x6F	; 111
 50e:	a9 f0       	breq	.+42     	; 0x53a <__stack+0xdb>
 510:	80 37       	cpi	r24, 0x70	; 112
 512:	20 f4       	brcc	.+8      	; 0x51c <__stack+0xbd>
 514:	88 35       	cpi	r24, 0x58	; 88
 516:	09 f0       	breq	.+2      	; 0x51a <__stack+0xbb>
 518:	ae c0       	rjmp	.+348    	; 0x676 <__stack+0x217>
 51a:	0b c0       	rjmp	.+22     	; 0x532 <__stack+0xd3>
 51c:	80 37       	cpi	r24, 0x70	; 112
 51e:	21 f0       	breq	.+8      	; 0x528 <__stack+0xc9>
 520:	88 37       	cpi	r24, 0x78	; 120
 522:	09 f0       	breq	.+2      	; 0x526 <__stack+0xc7>
 524:	a8 c0       	rjmp	.+336    	; 0x676 <__stack+0x217>
 526:	01 c0       	rjmp	.+2      	; 0x52a <__stack+0xcb>
 528:	10 61       	ori	r17, 0x10	; 16
 52a:	14 ff       	sbrs	r17, 4
 52c:	09 c0       	rjmp	.+18     	; 0x540 <__stack+0xe1>
 52e:	14 60       	ori	r17, 0x04	; 4
 530:	07 c0       	rjmp	.+14     	; 0x540 <__stack+0xe1>
 532:	14 ff       	sbrs	r17, 4
 534:	08 c0       	rjmp	.+16     	; 0x546 <__stack+0xe7>
 536:	16 60       	ori	r17, 0x06	; 6
 538:	06 c0       	rjmp	.+12     	; 0x546 <__stack+0xe7>
 53a:	28 e0       	ldi	r18, 0x08	; 8
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__stack+0xeb>
 540:	20 e1       	ldi	r18, 0x10	; 16
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0xeb>
 546:	20 e1       	ldi	r18, 0x10	; 16
 548:	32 e0       	ldi	r19, 0x02	; 2
 54a:	f5 01       	movw	r30, r10
 54c:	17 ff       	sbrs	r17, 7
 54e:	07 c0       	rjmp	.+14     	; 0x55e <__stack+0xff>
 550:	60 81       	ld	r22, Z
 552:	71 81       	ldd	r23, Z+1	; 0x01
 554:	82 81       	ldd	r24, Z+2	; 0x02
 556:	93 81       	ldd	r25, Z+3	; 0x03
 558:	44 e0       	ldi	r20, 0x04	; 4
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	06 c0       	rjmp	.+12     	; 0x56a <__stack+0x10b>
 55e:	60 81       	ld	r22, Z
 560:	71 81       	ldd	r23, Z+1	; 0x01
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	42 e0       	ldi	r20, 0x02	; 2
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	a4 0e       	add	r10, r20
 56c:	b5 1e       	adc	r11, r21
 56e:	a2 01       	movw	r20, r4
 570:	0e 94 87 03 	call	0x70e	; 0x70e <__ultoa_invert>
 574:	d8 2e       	mov	r13, r24
 576:	d4 18       	sub	r13, r4
 578:	01 2f       	mov	r16, r17
 57a:	0f 77       	andi	r16, 0x7F	; 127
 57c:	06 ff       	sbrs	r16, 6
 57e:	09 c0       	rjmp	.+18     	; 0x592 <__stack+0x133>
 580:	0e 7f       	andi	r16, 0xFE	; 254
 582:	df 14       	cp	r13, r15
 584:	30 f4       	brcc	.+12     	; 0x592 <__stack+0x133>
 586:	04 ff       	sbrs	r16, 4
 588:	06 c0       	rjmp	.+12     	; 0x596 <__stack+0x137>
 58a:	02 fd       	sbrc	r16, 2
 58c:	04 c0       	rjmp	.+8      	; 0x596 <__stack+0x137>
 58e:	0f 7e       	andi	r16, 0xEF	; 239
 590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x137>
 592:	1d 2d       	mov	r17, r13
 594:	01 c0       	rjmp	.+2      	; 0x598 <__stack+0x139>
 596:	1f 2d       	mov	r17, r15
 598:	80 2f       	mov	r24, r16
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	04 ff       	sbrs	r16, 4
 59e:	0c c0       	rjmp	.+24     	; 0x5b8 <__stack+0x159>
 5a0:	fe 01       	movw	r30, r28
 5a2:	ed 0d       	add	r30, r13
 5a4:	f1 1d       	adc	r31, r1
 5a6:	20 81       	ld	r18, Z
 5a8:	20 33       	cpi	r18, 0x30	; 48
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__stack+0x151>
 5ac:	09 7e       	andi	r16, 0xE9	; 233
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <__stack+0x163>
 5b0:	02 ff       	sbrs	r16, 2
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__stack+0x161>
 5b4:	1e 5f       	subi	r17, 0xFE	; 254
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__stack+0x163>
 5b8:	86 78       	andi	r24, 0x86	; 134
 5ba:	90 70       	andi	r25, 0x00	; 0
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__stack+0x163>
 5c0:	1f 5f       	subi	r17, 0xFF	; 255
 5c2:	80 2e       	mov	r8, r16
 5c4:	99 24       	eor	r9, r9
 5c6:	03 fd       	sbrc	r16, 3
 5c8:	12 c0       	rjmp	.+36     	; 0x5ee <__stack+0x18f>
 5ca:	00 ff       	sbrs	r16, 0
 5cc:	0d c0       	rjmp	.+26     	; 0x5e8 <__stack+0x189>
 5ce:	fd 2c       	mov	r15, r13
 5d0:	1e 15       	cp	r17, r14
 5d2:	50 f4       	brcc	.+20     	; 0x5e8 <__stack+0x189>
 5d4:	fe 0c       	add	r15, r14
 5d6:	f1 1a       	sub	r15, r17
 5d8:	1e 2d       	mov	r17, r14
 5da:	06 c0       	rjmp	.+12     	; 0x5e8 <__stack+0x189>
 5dc:	80 e2       	ldi	r24, 0x20	; 32
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	b3 01       	movw	r22, r6
 5e2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 5e6:	1f 5f       	subi	r17, 0xFF	; 255
 5e8:	1e 15       	cp	r17, r14
 5ea:	c0 f3       	brcs	.-16     	; 0x5dc <__stack+0x17d>
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <__stack+0x197>
 5ee:	1e 15       	cp	r17, r14
 5f0:	10 f4       	brcc	.+4      	; 0x5f6 <__stack+0x197>
 5f2:	e1 1a       	sub	r14, r17
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <__stack+0x199>
 5f6:	ee 24       	eor	r14, r14
 5f8:	84 fe       	sbrs	r8, 4
 5fa:	0f c0       	rjmp	.+30     	; 0x61a <__stack+0x1bb>
 5fc:	80 e3       	ldi	r24, 0x30	; 48
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	b3 01       	movw	r22, r6
 602:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 606:	82 fe       	sbrs	r8, 2
 608:	1f c0       	rjmp	.+62     	; 0x648 <__stack+0x1e9>
 60a:	81 fe       	sbrs	r8, 1
 60c:	03 c0       	rjmp	.+6      	; 0x614 <__stack+0x1b5>
 60e:	88 e5       	ldi	r24, 0x58	; 88
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	10 c0       	rjmp	.+32     	; 0x634 <__stack+0x1d5>
 614:	88 e7       	ldi	r24, 0x78	; 120
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0d c0       	rjmp	.+26     	; 0x634 <__stack+0x1d5>
 61a:	c4 01       	movw	r24, r8
 61c:	86 78       	andi	r24, 0x86	; 134
 61e:	90 70       	andi	r25, 0x00	; 0
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	91 f0       	breq	.+36     	; 0x648 <__stack+0x1e9>
 624:	81 fc       	sbrc	r8, 1
 626:	02 c0       	rjmp	.+4      	; 0x62c <__stack+0x1cd>
 628:	80 e2       	ldi	r24, 0x20	; 32
 62a:	01 c0       	rjmp	.+2      	; 0x62e <__stack+0x1cf>
 62c:	8b e2       	ldi	r24, 0x2B	; 43
 62e:	07 fd       	sbrc	r16, 7
 630:	8d e2       	ldi	r24, 0x2D	; 45
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	b3 01       	movw	r22, r6
 636:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__stack+0x1e9>
 63c:	80 e3       	ldi	r24, 0x30	; 48
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	b3 01       	movw	r22, r6
 642:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 646:	fa 94       	dec	r15
 648:	df 14       	cp	r13, r15
 64a:	c0 f3       	brcs	.-16     	; 0x63c <__stack+0x1dd>
 64c:	da 94       	dec	r13
 64e:	f2 01       	movw	r30, r4
 650:	ed 0d       	add	r30, r13
 652:	f1 1d       	adc	r31, r1
 654:	80 81       	ld	r24, Z
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	b3 01       	movw	r22, r6
 65a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 65e:	dd 20       	and	r13, r13
 660:	a9 f7       	brne	.-22     	; 0x64c <__stack+0x1ed>
 662:	06 c0       	rjmp	.+12     	; 0x670 <__stack+0x211>
 664:	80 e2       	ldi	r24, 0x20	; 32
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	b3 01       	movw	r22, r6
 66a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fputc>
 66e:	ea 94       	dec	r14
 670:	ee 20       	and	r14, r14
 672:	c1 f7       	brne	.-16     	; 0x664 <__stack+0x205>
 674:	40 ce       	rjmp	.-896    	; 0x2f6 <vfprintf+0x28>
 676:	f3 01       	movw	r30, r6
 678:	86 81       	ldd	r24, Z+6	; 0x06
 67a:	97 81       	ldd	r25, Z+7	; 0x07
 67c:	02 c0       	rjmp	.+4      	; 0x682 <__stack+0x223>
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	2d 96       	adiw	r28, 0x0d	; 13
 684:	e2 e1       	ldi	r30, 0x12	; 18
 686:	0c 94 01 04 	jmp	0x802	; 0x802 <__epilogue_restores__>

0000068a <strnlen_P>:
 68a:	fc 01       	movw	r30, r24
 68c:	05 90       	lpm	r0, Z+
 68e:	61 50       	subi	r22, 0x01	; 1
 690:	70 40       	sbci	r23, 0x00	; 0
 692:	01 10       	cpse	r0, r1
 694:	d8 f7       	brcc	.-10     	; 0x68c <strnlen_P+0x2>
 696:	80 95       	com	r24
 698:	90 95       	com	r25
 69a:	8e 0f       	add	r24, r30
 69c:	9f 1f       	adc	r25, r31
 69e:	08 95       	ret

000006a0 <strnlen>:
 6a0:	fc 01       	movw	r30, r24
 6a2:	61 50       	subi	r22, 0x01	; 1
 6a4:	70 40       	sbci	r23, 0x00	; 0
 6a6:	01 90       	ld	r0, Z+
 6a8:	01 10       	cpse	r0, r1
 6aa:	d8 f7       	brcc	.-10     	; 0x6a2 <strnlen+0x2>
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	8e 0f       	add	r24, r30
 6b2:	9f 1f       	adc	r25, r31
 6b4:	08 95       	ret

000006b6 <fputc>:
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	8c 01       	movw	r16, r24
 6c0:	eb 01       	movw	r28, r22
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	81 ff       	sbrs	r24, 1
 6c6:	1b c0       	rjmp	.+54     	; 0x6fe <fputc+0x48>
 6c8:	82 ff       	sbrs	r24, 2
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <fputc+0x30>
 6cc:	2e 81       	ldd	r18, Y+6	; 0x06
 6ce:	3f 81       	ldd	r19, Y+7	; 0x07
 6d0:	8c 81       	ldd	r24, Y+4	; 0x04
 6d2:	9d 81       	ldd	r25, Y+5	; 0x05
 6d4:	28 17       	cp	r18, r24
 6d6:	39 07       	cpc	r19, r25
 6d8:	64 f4       	brge	.+24     	; 0x6f2 <fputc+0x3c>
 6da:	e8 81       	ld	r30, Y
 6dc:	f9 81       	ldd	r31, Y+1	; 0x01
 6de:	01 93       	st	Z+, r16
 6e0:	f9 83       	std	Y+1, r31	; 0x01
 6e2:	e8 83       	st	Y, r30
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <fputc+0x3c>
 6e6:	e8 85       	ldd	r30, Y+8	; 0x08
 6e8:	f9 85       	ldd	r31, Y+9	; 0x09
 6ea:	80 2f       	mov	r24, r16
 6ec:	09 95       	icall
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	31 f4       	brne	.+12     	; 0x6fe <fputc+0x48>
 6f2:	8e 81       	ldd	r24, Y+6	; 0x06
 6f4:	9f 81       	ldd	r25, Y+7	; 0x07
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	9f 83       	std	Y+7, r25	; 0x07
 6fa:	8e 83       	std	Y+6, r24	; 0x06
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <fputc+0x4c>
 6fe:	0f ef       	ldi	r16, 0xFF	; 255
 700:	1f ef       	ldi	r17, 0xFF	; 255
 702:	c8 01       	movw	r24, r16
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	08 95       	ret

0000070e <__ultoa_invert>:
 70e:	fa 01       	movw	r30, r20
 710:	aa 27       	eor	r26, r26
 712:	28 30       	cpi	r18, 0x08	; 8
 714:	51 f1       	breq	.+84     	; 0x76a <__ultoa_invert+0x5c>
 716:	20 31       	cpi	r18, 0x10	; 16
 718:	81 f1       	breq	.+96     	; 0x77a <__ultoa_invert+0x6c>
 71a:	e8 94       	clt
 71c:	6f 93       	push	r22
 71e:	6e 7f       	andi	r22, 0xFE	; 254
 720:	6e 5f       	subi	r22, 0xFE	; 254
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	af 4f       	sbci	r26, 0xFF	; 255
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	3e d0       	rcall	.+124    	; 0x7aa <__ultoa_invert+0x9c>
 72e:	b4 e0       	ldi	r27, 0x04	; 4
 730:	3c d0       	rcall	.+120    	; 0x7aa <__ultoa_invert+0x9c>
 732:	67 0f       	add	r22, r23
 734:	78 1f       	adc	r23, r24
 736:	89 1f       	adc	r24, r25
 738:	9a 1f       	adc	r25, r26
 73a:	a1 1d       	adc	r26, r1
 73c:	68 0f       	add	r22, r24
 73e:	79 1f       	adc	r23, r25
 740:	8a 1f       	adc	r24, r26
 742:	91 1d       	adc	r25, r1
 744:	a1 1d       	adc	r26, r1
 746:	6a 0f       	add	r22, r26
 748:	71 1d       	adc	r23, r1
 74a:	81 1d       	adc	r24, r1
 74c:	91 1d       	adc	r25, r1
 74e:	a1 1d       	adc	r26, r1
 750:	20 d0       	rcall	.+64     	; 0x792 <__ultoa_invert+0x84>
 752:	09 f4       	brne	.+2      	; 0x756 <__ultoa_invert+0x48>
 754:	68 94       	set
 756:	3f 91       	pop	r19
 758:	2a e0       	ldi	r18, 0x0A	; 10
 75a:	26 9f       	mul	r18, r22
 75c:	11 24       	eor	r1, r1
 75e:	30 19       	sub	r19, r0
 760:	30 5d       	subi	r19, 0xD0	; 208
 762:	31 93       	st	Z+, r19
 764:	de f6       	brtc	.-74     	; 0x71c <__ultoa_invert+0xe>
 766:	cf 01       	movw	r24, r30
 768:	08 95       	ret
 76a:	46 2f       	mov	r20, r22
 76c:	47 70       	andi	r20, 0x07	; 7
 76e:	40 5d       	subi	r20, 0xD0	; 208
 770:	41 93       	st	Z+, r20
 772:	b3 e0       	ldi	r27, 0x03	; 3
 774:	0f d0       	rcall	.+30     	; 0x794 <__ultoa_invert+0x86>
 776:	c9 f7       	brne	.-14     	; 0x76a <__ultoa_invert+0x5c>
 778:	f6 cf       	rjmp	.-20     	; 0x766 <__ultoa_invert+0x58>
 77a:	46 2f       	mov	r20, r22
 77c:	4f 70       	andi	r20, 0x0F	; 15
 77e:	40 5d       	subi	r20, 0xD0	; 208
 780:	4a 33       	cpi	r20, 0x3A	; 58
 782:	18 f0       	brcs	.+6      	; 0x78a <__ultoa_invert+0x7c>
 784:	49 5d       	subi	r20, 0xD9	; 217
 786:	31 fd       	sbrc	r19, 1
 788:	40 52       	subi	r20, 0x20	; 32
 78a:	41 93       	st	Z+, r20
 78c:	02 d0       	rcall	.+4      	; 0x792 <__ultoa_invert+0x84>
 78e:	a9 f7       	brne	.-22     	; 0x77a <__ultoa_invert+0x6c>
 790:	ea cf       	rjmp	.-44     	; 0x766 <__ultoa_invert+0x58>
 792:	b4 e0       	ldi	r27, 0x04	; 4
 794:	a6 95       	lsr	r26
 796:	97 95       	ror	r25
 798:	87 95       	ror	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	ba 95       	dec	r27
 7a0:	c9 f7       	brne	.-14     	; 0x794 <__ultoa_invert+0x86>
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	61 05       	cpc	r22, r1
 7a6:	71 05       	cpc	r23, r1
 7a8:	08 95       	ret
 7aa:	9b 01       	movw	r18, r22
 7ac:	ac 01       	movw	r20, r24
 7ae:	0a 2e       	mov	r0, r26
 7b0:	06 94       	lsr	r0
 7b2:	57 95       	ror	r21
 7b4:	47 95       	ror	r20
 7b6:	37 95       	ror	r19
 7b8:	27 95       	ror	r18
 7ba:	ba 95       	dec	r27
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__ultoa_invert+0xa2>
 7be:	62 0f       	add	r22, r18
 7c0:	73 1f       	adc	r23, r19
 7c2:	84 1f       	adc	r24, r20
 7c4:	95 1f       	adc	r25, r21
 7c6:	a0 1d       	adc	r26, r0
 7c8:	08 95       	ret

000007ca <__prologue_saves__>:
 7ca:	2f 92       	push	r2
 7cc:	3f 92       	push	r3
 7ce:	4f 92       	push	r4
 7d0:	5f 92       	push	r5
 7d2:	6f 92       	push	r6
 7d4:	7f 92       	push	r7
 7d6:	8f 92       	push	r8
 7d8:	9f 92       	push	r9
 7da:	af 92       	push	r10
 7dc:	bf 92       	push	r11
 7de:	cf 92       	push	r12
 7e0:	df 92       	push	r13
 7e2:	ef 92       	push	r14
 7e4:	ff 92       	push	r15
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	ca 1b       	sub	r28, r26
 7f4:	db 0b       	sbc	r29, r27
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	f8 94       	cli
 7fa:	de bf       	out	0x3e, r29	; 62
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	cd bf       	out	0x3d, r28	; 61
 800:	09 94       	ijmp

00000802 <__epilogue_restores__>:
 802:	2a 88       	ldd	r2, Y+18	; 0x12
 804:	39 88       	ldd	r3, Y+17	; 0x11
 806:	48 88       	ldd	r4, Y+16	; 0x10
 808:	5f 84       	ldd	r5, Y+15	; 0x0f
 80a:	6e 84       	ldd	r6, Y+14	; 0x0e
 80c:	7d 84       	ldd	r7, Y+13	; 0x0d
 80e:	8c 84       	ldd	r8, Y+12	; 0x0c
 810:	9b 84       	ldd	r9, Y+11	; 0x0b
 812:	aa 84       	ldd	r10, Y+10	; 0x0a
 814:	b9 84       	ldd	r11, Y+9	; 0x09
 816:	c8 84       	ldd	r12, Y+8	; 0x08
 818:	df 80       	ldd	r13, Y+7	; 0x07
 81a:	ee 80       	ldd	r14, Y+6	; 0x06
 81c:	fd 80       	ldd	r15, Y+5	; 0x05
 81e:	0c 81       	ldd	r16, Y+4	; 0x04
 820:	1b 81       	ldd	r17, Y+3	; 0x03
 822:	aa 81       	ldd	r26, Y+2	; 0x02
 824:	b9 81       	ldd	r27, Y+1	; 0x01
 826:	ce 0f       	add	r28, r30
 828:	d1 1d       	adc	r29, r1
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	f8 94       	cli
 82e:	de bf       	out	0x3e, r29	; 62
 830:	0f be       	out	0x3f, r0	; 63
 832:	cd bf       	out	0x3d, r28	; 61
 834:	ed 01       	movw	r28, r26
 836:	08 95       	ret

00000838 <_exit>:
 838:	f8 94       	cli

0000083a <__stop_program>:
 83a:	ff cf       	rjmp	.-2      	; 0x83a <__stop_program>
